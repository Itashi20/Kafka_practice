/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.e4rlearning;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class chapters_record extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5805885912116792435L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"chapters_record\",\"namespace\":\"com.e4rlearning\",\"fields\":[{\"name\":\"chapter\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"hno\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"chapterdesc\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"topics\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"topics_record\",\"fields\":[{\"name\":\"topic\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tno\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"topicdesc\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}}},{\"name\":\"cocsw\",\"type\":\"boolean\"},{\"name\":\"cocswh\",\"type\":\"boolean\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<chapters_record> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<chapters_record> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<chapters_record> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<chapters_record> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<chapters_record> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this chapters_record to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a chapters_record from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a chapters_record instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static chapters_record fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String chapter;
  private java.lang.String hno;
  private java.lang.String chapterdesc;
  private java.util.List<com.e4rlearning.topics_record> topics;
  private boolean cocsw;
  private boolean cocswh;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public chapters_record() {}

  /**
   * All-args constructor.
   * @param chapter The new value for chapter
   * @param hno The new value for hno
   * @param chapterdesc The new value for chapterdesc
   * @param topics The new value for topics
   * @param cocsw The new value for cocsw
   * @param cocswh The new value for cocswh
   */
  public chapters_record(java.lang.String chapter, java.lang.String hno, java.lang.String chapterdesc, java.util.List<com.e4rlearning.topics_record> topics, java.lang.Boolean cocsw, java.lang.Boolean cocswh) {
    this.chapter = chapter;
    this.hno = hno;
    this.chapterdesc = chapterdesc;
    this.topics = topics;
    this.cocsw = cocsw;
    this.cocswh = cocswh;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return chapter;
    case 1: return hno;
    case 2: return chapterdesc;
    case 3: return topics;
    case 4: return cocsw;
    case 5: return cocswh;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: chapter = value$ != null ? value$.toString() : null; break;
    case 1: hno = value$ != null ? value$.toString() : null; break;
    case 2: chapterdesc = value$ != null ? value$.toString() : null; break;
    case 3: topics = (java.util.List<com.e4rlearning.topics_record>)value$; break;
    case 4: cocsw = (java.lang.Boolean)value$; break;
    case 5: cocswh = (java.lang.Boolean)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'chapter' field.
   * @return The value of the 'chapter' field.
   */
  public java.lang.String getChapter() {
    return chapter;
  }


  /**
   * Sets the value of the 'chapter' field.
   * @param value the value to set.
   */
  public void setChapter(java.lang.String value) {
    this.chapter = value;
  }

  /**
   * Gets the value of the 'hno' field.
   * @return The value of the 'hno' field.
   */
  public java.lang.String getHno() {
    return hno;
  }


  /**
   * Sets the value of the 'hno' field.
   * @param value the value to set.
   */
  public void setHno(java.lang.String value) {
    this.hno = value;
  }

  /**
   * Gets the value of the 'chapterdesc' field.
   * @return The value of the 'chapterdesc' field.
   */
  public java.lang.String getChapterdesc() {
    return chapterdesc;
  }


  /**
   * Sets the value of the 'chapterdesc' field.
   * @param value the value to set.
   */
  public void setChapterdesc(java.lang.String value) {
    this.chapterdesc = value;
  }

  /**
   * Gets the value of the 'topics' field.
   * @return The value of the 'topics' field.
   */
  public java.util.List<com.e4rlearning.topics_record> getTopics() {
    return topics;
  }


  /**
   * Sets the value of the 'topics' field.
   * @param value the value to set.
   */
  public void setTopics(java.util.List<com.e4rlearning.topics_record> value) {
    this.topics = value;
  }

  /**
   * Gets the value of the 'cocsw' field.
   * @return The value of the 'cocsw' field.
   */
  public boolean getCocsw() {
    return cocsw;
  }


  /**
   * Sets the value of the 'cocsw' field.
   * @param value the value to set.
   */
  public void setCocsw(boolean value) {
    this.cocsw = value;
  }

  /**
   * Gets the value of the 'cocswh' field.
   * @return The value of the 'cocswh' field.
   */
  public boolean getCocswh() {
    return cocswh;
  }


  /**
   * Sets the value of the 'cocswh' field.
   * @param value the value to set.
   */
  public void setCocswh(boolean value) {
    this.cocswh = value;
  }

  /**
   * Creates a new chapters_record RecordBuilder.
   * @return A new chapters_record RecordBuilder
   */
  public static com.e4rlearning.chapters_record.Builder newBuilder() {
    return new com.e4rlearning.chapters_record.Builder();
  }

  /**
   * Creates a new chapters_record RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new chapters_record RecordBuilder
   */
  public static com.e4rlearning.chapters_record.Builder newBuilder(com.e4rlearning.chapters_record.Builder other) {
    if (other == null) {
      return new com.e4rlearning.chapters_record.Builder();
    } else {
      return new com.e4rlearning.chapters_record.Builder(other);
    }
  }

  /**
   * Creates a new chapters_record RecordBuilder by copying an existing chapters_record instance.
   * @param other The existing instance to copy.
   * @return A new chapters_record RecordBuilder
   */
  public static com.e4rlearning.chapters_record.Builder newBuilder(com.e4rlearning.chapters_record other) {
    if (other == null) {
      return new com.e4rlearning.chapters_record.Builder();
    } else {
      return new com.e4rlearning.chapters_record.Builder(other);
    }
  }

  /**
   * RecordBuilder for chapters_record instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<chapters_record>
    implements org.apache.avro.data.RecordBuilder<chapters_record> {

    private java.lang.String chapter;
    private java.lang.String hno;
    private java.lang.String chapterdesc;
    private java.util.List<com.e4rlearning.topics_record> topics;
    private boolean cocsw;
    private boolean cocswh;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.e4rlearning.chapters_record.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.chapter)) {
        this.chapter = data().deepCopy(fields()[0].schema(), other.chapter);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.hno)) {
        this.hno = data().deepCopy(fields()[1].schema(), other.hno);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.chapterdesc)) {
        this.chapterdesc = data().deepCopy(fields()[2].schema(), other.chapterdesc);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.topics)) {
        this.topics = data().deepCopy(fields()[3].schema(), other.topics);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.cocsw)) {
        this.cocsw = data().deepCopy(fields()[4].schema(), other.cocsw);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.cocswh)) {
        this.cocswh = data().deepCopy(fields()[5].schema(), other.cocswh);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing chapters_record instance
     * @param other The existing instance to copy.
     */
    private Builder(com.e4rlearning.chapters_record other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.chapter)) {
        this.chapter = data().deepCopy(fields()[0].schema(), other.chapter);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.hno)) {
        this.hno = data().deepCopy(fields()[1].schema(), other.hno);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.chapterdesc)) {
        this.chapterdesc = data().deepCopy(fields()[2].schema(), other.chapterdesc);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.topics)) {
        this.topics = data().deepCopy(fields()[3].schema(), other.topics);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.cocsw)) {
        this.cocsw = data().deepCopy(fields()[4].schema(), other.cocsw);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.cocswh)) {
        this.cocswh = data().deepCopy(fields()[5].schema(), other.cocswh);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'chapter' field.
      * @return The value.
      */
    public java.lang.String getChapter() {
      return chapter;
    }


    /**
      * Sets the value of the 'chapter' field.
      * @param value The value of 'chapter'.
      * @return This builder.
      */
    public com.e4rlearning.chapters_record.Builder setChapter(java.lang.String value) {
      validate(fields()[0], value);
      this.chapter = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'chapter' field has been set.
      * @return True if the 'chapter' field has been set, false otherwise.
      */
    public boolean hasChapter() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'chapter' field.
      * @return This builder.
      */
    public com.e4rlearning.chapters_record.Builder clearChapter() {
      chapter = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'hno' field.
      * @return The value.
      */
    public java.lang.String getHno() {
      return hno;
    }


    /**
      * Sets the value of the 'hno' field.
      * @param value The value of 'hno'.
      * @return This builder.
      */
    public com.e4rlearning.chapters_record.Builder setHno(java.lang.String value) {
      validate(fields()[1], value);
      this.hno = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'hno' field has been set.
      * @return True if the 'hno' field has been set, false otherwise.
      */
    public boolean hasHno() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'hno' field.
      * @return This builder.
      */
    public com.e4rlearning.chapters_record.Builder clearHno() {
      hno = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'chapterdesc' field.
      * @return The value.
      */
    public java.lang.String getChapterdesc() {
      return chapterdesc;
    }


    /**
      * Sets the value of the 'chapterdesc' field.
      * @param value The value of 'chapterdesc'.
      * @return This builder.
      */
    public com.e4rlearning.chapters_record.Builder setChapterdesc(java.lang.String value) {
      validate(fields()[2], value);
      this.chapterdesc = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'chapterdesc' field has been set.
      * @return True if the 'chapterdesc' field has been set, false otherwise.
      */
    public boolean hasChapterdesc() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'chapterdesc' field.
      * @return This builder.
      */
    public com.e4rlearning.chapters_record.Builder clearChapterdesc() {
      chapterdesc = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'topics' field.
      * @return The value.
      */
    public java.util.List<com.e4rlearning.topics_record> getTopics() {
      return topics;
    }


    /**
      * Sets the value of the 'topics' field.
      * @param value The value of 'topics'.
      * @return This builder.
      */
    public com.e4rlearning.chapters_record.Builder setTopics(java.util.List<com.e4rlearning.topics_record> value) {
      validate(fields()[3], value);
      this.topics = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'topics' field has been set.
      * @return True if the 'topics' field has been set, false otherwise.
      */
    public boolean hasTopics() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'topics' field.
      * @return This builder.
      */
    public com.e4rlearning.chapters_record.Builder clearTopics() {
      topics = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'cocsw' field.
      * @return The value.
      */
    public boolean getCocsw() {
      return cocsw;
    }


    /**
      * Sets the value of the 'cocsw' field.
      * @param value The value of 'cocsw'.
      * @return This builder.
      */
    public com.e4rlearning.chapters_record.Builder setCocsw(boolean value) {
      validate(fields()[4], value);
      this.cocsw = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'cocsw' field has been set.
      * @return True if the 'cocsw' field has been set, false otherwise.
      */
    public boolean hasCocsw() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'cocsw' field.
      * @return This builder.
      */
    public com.e4rlearning.chapters_record.Builder clearCocsw() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'cocswh' field.
      * @return The value.
      */
    public boolean getCocswh() {
      return cocswh;
    }


    /**
      * Sets the value of the 'cocswh' field.
      * @param value The value of 'cocswh'.
      * @return This builder.
      */
    public com.e4rlearning.chapters_record.Builder setCocswh(boolean value) {
      validate(fields()[5], value);
      this.cocswh = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'cocswh' field has been set.
      * @return True if the 'cocswh' field has been set, false otherwise.
      */
    public boolean hasCocswh() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'cocswh' field.
      * @return This builder.
      */
    public com.e4rlearning.chapters_record.Builder clearCocswh() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public chapters_record build() {
      try {
        chapters_record record = new chapters_record();
        record.chapter = fieldSetFlags()[0] ? this.chapter : (java.lang.String) defaultValue(fields()[0]);
        record.hno = fieldSetFlags()[1] ? this.hno : (java.lang.String) defaultValue(fields()[1]);
        record.chapterdesc = fieldSetFlags()[2] ? this.chapterdesc : (java.lang.String) defaultValue(fields()[2]);
        record.topics = fieldSetFlags()[3] ? this.topics : (java.util.List<com.e4rlearning.topics_record>) defaultValue(fields()[3]);
        record.cocsw = fieldSetFlags()[4] ? this.cocsw : (java.lang.Boolean) defaultValue(fields()[4]);
        record.cocswh = fieldSetFlags()[5] ? this.cocswh : (java.lang.Boolean) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<chapters_record>
    WRITER$ = (org.apache.avro.io.DatumWriter<chapters_record>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<chapters_record>
    READER$ = (org.apache.avro.io.DatumReader<chapters_record>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.chapter);

    out.writeString(this.hno);

    out.writeString(this.chapterdesc);

    long size0 = this.topics.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (com.e4rlearning.topics_record e0: this.topics) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    out.writeBoolean(this.cocsw);

    out.writeBoolean(this.cocswh);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.chapter = in.readString();

      this.hno = in.readString();

      this.chapterdesc = in.readString();

      long size0 = in.readArrayStart();
      java.util.List<com.e4rlearning.topics_record> a0 = this.topics;
      if (a0 == null) {
        a0 = new SpecificData.Array<com.e4rlearning.topics_record>((int)size0, SCHEMA$.getField("topics").schema());
        this.topics = a0;
      } else a0.clear();
      SpecificData.Array<com.e4rlearning.topics_record> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.e4rlearning.topics_record>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          com.e4rlearning.topics_record e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new com.e4rlearning.topics_record();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

      this.cocsw = in.readBoolean();

      this.cocswh = in.readBoolean();

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.chapter = in.readString();
          break;

        case 1:
          this.hno = in.readString();
          break;

        case 2:
          this.chapterdesc = in.readString();
          break;

        case 3:
          long size0 = in.readArrayStart();
          java.util.List<com.e4rlearning.topics_record> a0 = this.topics;
          if (a0 == null) {
            a0 = new SpecificData.Array<com.e4rlearning.topics_record>((int)size0, SCHEMA$.getField("topics").schema());
            this.topics = a0;
          } else a0.clear();
          SpecificData.Array<com.e4rlearning.topics_record> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.e4rlearning.topics_record>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              com.e4rlearning.topics_record e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new com.e4rlearning.topics_record();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        case 4:
          this.cocsw = in.readBoolean();
          break;

        case 5:
          this.cocswh = in.readBoolean();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










