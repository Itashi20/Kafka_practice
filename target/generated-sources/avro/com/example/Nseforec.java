/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.example;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Nseforec extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7540769754668748536L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Nseforec\",\"namespace\":\"com.example\",\"fields\":[{\"name\":\"instrument\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Future or option broadly\"},{\"name\":\"symbol\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Name of the stock traded\"},{\"name\":\"expiry_dt\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Expiry date of contract\"},{\"name\":\"strike_pr\",\"type\":\"float\",\"doc\":\"Strike price for options, 0 for Futures\"},{\"name\":\"option_typ\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"CE, PE, XX\"},{\"name\":\"openpr\",\"type\":\"float\",\"doc\":\"opening price\"},{\"name\":\"highpr\",\"type\":\"float\",\"doc\":\"highest price in the day\"},{\"name\":\"lowpr\",\"type\":\"float\",\"doc\":\"lowest price in the day\"},{\"name\":\"closepr\",\"type\":\"float\",\"doc\":\"closing price\"},{\"name\":\"settlepr\",\"type\":\"float\",\"doc\":\"settlement price\"},{\"name\":\"contracts\",\"type\":\"int\",\"doc\":\"number of contracts\"},{\"name\":\"valinlakh\",\"type\":\"float\",\"doc\":\"total value traded in lakhs\"},{\"name\":\"openint\",\"type\":\"int\",\"doc\":\"total positions open\"},{\"name\":\"chginoi\",\"type\":\"int\",\"doc\":\"change in open interest in the day\"},{\"name\":\"trdate\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"trade date in DD-MMMM-YYYY format\"},{\"name\":\"tmstamp\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"timestamp when record was inserted\"}],\"version\":\"1\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Nseforec> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Nseforec> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Nseforec> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Nseforec> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Nseforec> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Nseforec to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Nseforec from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Nseforec instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Nseforec fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Future or option broadly */
  private java.lang.String instrument;
  /** Name of the stock traded */
  private java.lang.String symbol;
  /** Expiry date of contract */
  private java.lang.String expiry_dt;
  /** Strike price for options, 0 for Futures */
  private float strike_pr;
  /** CE, PE, XX */
  private java.lang.String option_typ;
  /** opening price */
  private float openpr;
  /** highest price in the day */
  private float highpr;
  /** lowest price in the day */
  private float lowpr;
  /** closing price */
  private float closepr;
  /** settlement price */
  private float settlepr;
  /** number of contracts */
  private int contracts;
  /** total value traded in lakhs */
  private float valinlakh;
  /** total positions open */
  private int openint;
  /** change in open interest in the day */
  private int chginoi;
  /** trade date in DD-MMMM-YYYY format */
  private java.lang.String trdate;
  /** timestamp when record was inserted */
  private java.lang.String tmstamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Nseforec() {}

  /**
   * All-args constructor.
   * @param instrument Future or option broadly
   * @param symbol Name of the stock traded
   * @param expiry_dt Expiry date of contract
   * @param strike_pr Strike price for options, 0 for Futures
   * @param option_typ CE, PE, XX
   * @param openpr opening price
   * @param highpr highest price in the day
   * @param lowpr lowest price in the day
   * @param closepr closing price
   * @param settlepr settlement price
   * @param contracts number of contracts
   * @param valinlakh total value traded in lakhs
   * @param openint total positions open
   * @param chginoi change in open interest in the day
   * @param trdate trade date in DD-MMMM-YYYY format
   * @param tmstamp timestamp when record was inserted
   */
  public Nseforec(java.lang.String instrument, java.lang.String symbol, java.lang.String expiry_dt, java.lang.Float strike_pr, java.lang.String option_typ, java.lang.Float openpr, java.lang.Float highpr, java.lang.Float lowpr, java.lang.Float closepr, java.lang.Float settlepr, java.lang.Integer contracts, java.lang.Float valinlakh, java.lang.Integer openint, java.lang.Integer chginoi, java.lang.String trdate, java.lang.String tmstamp) {
    this.instrument = instrument;
    this.symbol = symbol;
    this.expiry_dt = expiry_dt;
    this.strike_pr = strike_pr;
    this.option_typ = option_typ;
    this.openpr = openpr;
    this.highpr = highpr;
    this.lowpr = lowpr;
    this.closepr = closepr;
    this.settlepr = settlepr;
    this.contracts = contracts;
    this.valinlakh = valinlakh;
    this.openint = openint;
    this.chginoi = chginoi;
    this.trdate = trdate;
    this.tmstamp = tmstamp;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return instrument;
    case 1: return symbol;
    case 2: return expiry_dt;
    case 3: return strike_pr;
    case 4: return option_typ;
    case 5: return openpr;
    case 6: return highpr;
    case 7: return lowpr;
    case 8: return closepr;
    case 9: return settlepr;
    case 10: return contracts;
    case 11: return valinlakh;
    case 12: return openint;
    case 13: return chginoi;
    case 14: return trdate;
    case 15: return tmstamp;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: instrument = value$ != null ? value$.toString() : null; break;
    case 1: symbol = value$ != null ? value$.toString() : null; break;
    case 2: expiry_dt = value$ != null ? value$.toString() : null; break;
    case 3: strike_pr = (java.lang.Float)value$; break;
    case 4: option_typ = value$ != null ? value$.toString() : null; break;
    case 5: openpr = (java.lang.Float)value$; break;
    case 6: highpr = (java.lang.Float)value$; break;
    case 7: lowpr = (java.lang.Float)value$; break;
    case 8: closepr = (java.lang.Float)value$; break;
    case 9: settlepr = (java.lang.Float)value$; break;
    case 10: contracts = (java.lang.Integer)value$; break;
    case 11: valinlakh = (java.lang.Float)value$; break;
    case 12: openint = (java.lang.Integer)value$; break;
    case 13: chginoi = (java.lang.Integer)value$; break;
    case 14: trdate = value$ != null ? value$.toString() : null; break;
    case 15: tmstamp = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'instrument' field.
   * @return Future or option broadly
   */
  public java.lang.String getInstrument() {
    return instrument;
  }


  /**
   * Sets the value of the 'instrument' field.
   * Future or option broadly
   * @param value the value to set.
   */
  public void setInstrument(java.lang.String value) {
    this.instrument = value;
  }

  /**
   * Gets the value of the 'symbol' field.
   * @return Name of the stock traded
   */
  public java.lang.String getSymbol() {
    return symbol;
  }


  /**
   * Sets the value of the 'symbol' field.
   * Name of the stock traded
   * @param value the value to set.
   */
  public void setSymbol(java.lang.String value) {
    this.symbol = value;
  }

  /**
   * Gets the value of the 'expiry_dt' field.
   * @return Expiry date of contract
   */
  public java.lang.String getExpiryDt() {
    return expiry_dt;
  }


  /**
   * Sets the value of the 'expiry_dt' field.
   * Expiry date of contract
   * @param value the value to set.
   */
  public void setExpiryDt(java.lang.String value) {
    this.expiry_dt = value;
  }

  /**
   * Gets the value of the 'strike_pr' field.
   * @return Strike price for options, 0 for Futures
   */
  public float getStrikePr() {
    return strike_pr;
  }


  /**
   * Sets the value of the 'strike_pr' field.
   * Strike price for options, 0 for Futures
   * @param value the value to set.
   */
  public void setStrikePr(float value) {
    this.strike_pr = value;
  }

  /**
   * Gets the value of the 'option_typ' field.
   * @return CE, PE, XX
   */
  public java.lang.String getOptionTyp() {
    return option_typ;
  }


  /**
   * Sets the value of the 'option_typ' field.
   * CE, PE, XX
   * @param value the value to set.
   */
  public void setOptionTyp(java.lang.String value) {
    this.option_typ = value;
  }

  /**
   * Gets the value of the 'openpr' field.
   * @return opening price
   */
  public float getOpenpr() {
    return openpr;
  }


  /**
   * Sets the value of the 'openpr' field.
   * opening price
   * @param value the value to set.
   */
  public void setOpenpr(float value) {
    this.openpr = value;
  }

  /**
   * Gets the value of the 'highpr' field.
   * @return highest price in the day
   */
  public float getHighpr() {
    return highpr;
  }


  /**
   * Sets the value of the 'highpr' field.
   * highest price in the day
   * @param value the value to set.
   */
  public void setHighpr(float value) {
    this.highpr = value;
  }

  /**
   * Gets the value of the 'lowpr' field.
   * @return lowest price in the day
   */
  public float getLowpr() {
    return lowpr;
  }


  /**
   * Sets the value of the 'lowpr' field.
   * lowest price in the day
   * @param value the value to set.
   */
  public void setLowpr(float value) {
    this.lowpr = value;
  }

  /**
   * Gets the value of the 'closepr' field.
   * @return closing price
   */
  public float getClosepr() {
    return closepr;
  }


  /**
   * Sets the value of the 'closepr' field.
   * closing price
   * @param value the value to set.
   */
  public void setClosepr(float value) {
    this.closepr = value;
  }

  /**
   * Gets the value of the 'settlepr' field.
   * @return settlement price
   */
  public float getSettlepr() {
    return settlepr;
  }


  /**
   * Sets the value of the 'settlepr' field.
   * settlement price
   * @param value the value to set.
   */
  public void setSettlepr(float value) {
    this.settlepr = value;
  }

  /**
   * Gets the value of the 'contracts' field.
   * @return number of contracts
   */
  public int getContracts() {
    return contracts;
  }


  /**
   * Sets the value of the 'contracts' field.
   * number of contracts
   * @param value the value to set.
   */
  public void setContracts(int value) {
    this.contracts = value;
  }

  /**
   * Gets the value of the 'valinlakh' field.
   * @return total value traded in lakhs
   */
  public float getValinlakh() {
    return valinlakh;
  }


  /**
   * Sets the value of the 'valinlakh' field.
   * total value traded in lakhs
   * @param value the value to set.
   */
  public void setValinlakh(float value) {
    this.valinlakh = value;
  }

  /**
   * Gets the value of the 'openint' field.
   * @return total positions open
   */
  public int getOpenint() {
    return openint;
  }


  /**
   * Sets the value of the 'openint' field.
   * total positions open
   * @param value the value to set.
   */
  public void setOpenint(int value) {
    this.openint = value;
  }

  /**
   * Gets the value of the 'chginoi' field.
   * @return change in open interest in the day
   */
  public int getChginoi() {
    return chginoi;
  }


  /**
   * Sets the value of the 'chginoi' field.
   * change in open interest in the day
   * @param value the value to set.
   */
  public void setChginoi(int value) {
    this.chginoi = value;
  }

  /**
   * Gets the value of the 'trdate' field.
   * @return trade date in DD-MMMM-YYYY format
   */
  public java.lang.String getTrdate() {
    return trdate;
  }


  /**
   * Sets the value of the 'trdate' field.
   * trade date in DD-MMMM-YYYY format
   * @param value the value to set.
   */
  public void setTrdate(java.lang.String value) {
    this.trdate = value;
  }

  /**
   * Gets the value of the 'tmstamp' field.
   * @return timestamp when record was inserted
   */
  public java.lang.String getTmstamp() {
    return tmstamp;
  }


  /**
   * Sets the value of the 'tmstamp' field.
   * timestamp when record was inserted
   * @param value the value to set.
   */
  public void setTmstamp(java.lang.String value) {
    this.tmstamp = value;
  }

  /**
   * Creates a new Nseforec RecordBuilder.
   * @return A new Nseforec RecordBuilder
   */
  public static com.example.Nseforec.Builder newBuilder() {
    return new com.example.Nseforec.Builder();
  }

  /**
   * Creates a new Nseforec RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Nseforec RecordBuilder
   */
  public static com.example.Nseforec.Builder newBuilder(com.example.Nseforec.Builder other) {
    if (other == null) {
      return new com.example.Nseforec.Builder();
    } else {
      return new com.example.Nseforec.Builder(other);
    }
  }

  /**
   * Creates a new Nseforec RecordBuilder by copying an existing Nseforec instance.
   * @param other The existing instance to copy.
   * @return A new Nseforec RecordBuilder
   */
  public static com.example.Nseforec.Builder newBuilder(com.example.Nseforec other) {
    if (other == null) {
      return new com.example.Nseforec.Builder();
    } else {
      return new com.example.Nseforec.Builder(other);
    }
  }

  /**
   * RecordBuilder for Nseforec instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Nseforec>
    implements org.apache.avro.data.RecordBuilder<Nseforec> {

    /** Future or option broadly */
    private java.lang.String instrument;
    /** Name of the stock traded */
    private java.lang.String symbol;
    /** Expiry date of contract */
    private java.lang.String expiry_dt;
    /** Strike price for options, 0 for Futures */
    private float strike_pr;
    /** CE, PE, XX */
    private java.lang.String option_typ;
    /** opening price */
    private float openpr;
    /** highest price in the day */
    private float highpr;
    /** lowest price in the day */
    private float lowpr;
    /** closing price */
    private float closepr;
    /** settlement price */
    private float settlepr;
    /** number of contracts */
    private int contracts;
    /** total value traded in lakhs */
    private float valinlakh;
    /** total positions open */
    private int openint;
    /** change in open interest in the day */
    private int chginoi;
    /** trade date in DD-MMMM-YYYY format */
    private java.lang.String trdate;
    /** timestamp when record was inserted */
    private java.lang.String tmstamp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.example.Nseforec.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.instrument)) {
        this.instrument = data().deepCopy(fields()[0].schema(), other.instrument);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.symbol)) {
        this.symbol = data().deepCopy(fields()[1].schema(), other.symbol);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.expiry_dt)) {
        this.expiry_dt = data().deepCopy(fields()[2].schema(), other.expiry_dt);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.strike_pr)) {
        this.strike_pr = data().deepCopy(fields()[3].schema(), other.strike_pr);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.option_typ)) {
        this.option_typ = data().deepCopy(fields()[4].schema(), other.option_typ);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.openpr)) {
        this.openpr = data().deepCopy(fields()[5].schema(), other.openpr);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.highpr)) {
        this.highpr = data().deepCopy(fields()[6].schema(), other.highpr);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.lowpr)) {
        this.lowpr = data().deepCopy(fields()[7].schema(), other.lowpr);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.closepr)) {
        this.closepr = data().deepCopy(fields()[8].schema(), other.closepr);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.settlepr)) {
        this.settlepr = data().deepCopy(fields()[9].schema(), other.settlepr);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.contracts)) {
        this.contracts = data().deepCopy(fields()[10].schema(), other.contracts);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.valinlakh)) {
        this.valinlakh = data().deepCopy(fields()[11].schema(), other.valinlakh);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.openint)) {
        this.openint = data().deepCopy(fields()[12].schema(), other.openint);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.chginoi)) {
        this.chginoi = data().deepCopy(fields()[13].schema(), other.chginoi);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.trdate)) {
        this.trdate = data().deepCopy(fields()[14].schema(), other.trdate);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (isValidValue(fields()[15], other.tmstamp)) {
        this.tmstamp = data().deepCopy(fields()[15].schema(), other.tmstamp);
        fieldSetFlags()[15] = other.fieldSetFlags()[15];
      }
    }

    /**
     * Creates a Builder by copying an existing Nseforec instance
     * @param other The existing instance to copy.
     */
    private Builder(com.example.Nseforec other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.instrument)) {
        this.instrument = data().deepCopy(fields()[0].schema(), other.instrument);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.symbol)) {
        this.symbol = data().deepCopy(fields()[1].schema(), other.symbol);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.expiry_dt)) {
        this.expiry_dt = data().deepCopy(fields()[2].schema(), other.expiry_dt);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.strike_pr)) {
        this.strike_pr = data().deepCopy(fields()[3].schema(), other.strike_pr);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.option_typ)) {
        this.option_typ = data().deepCopy(fields()[4].schema(), other.option_typ);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.openpr)) {
        this.openpr = data().deepCopy(fields()[5].schema(), other.openpr);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.highpr)) {
        this.highpr = data().deepCopy(fields()[6].schema(), other.highpr);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.lowpr)) {
        this.lowpr = data().deepCopy(fields()[7].schema(), other.lowpr);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.closepr)) {
        this.closepr = data().deepCopy(fields()[8].schema(), other.closepr);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.settlepr)) {
        this.settlepr = data().deepCopy(fields()[9].schema(), other.settlepr);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.contracts)) {
        this.contracts = data().deepCopy(fields()[10].schema(), other.contracts);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.valinlakh)) {
        this.valinlakh = data().deepCopy(fields()[11].schema(), other.valinlakh);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.openint)) {
        this.openint = data().deepCopy(fields()[12].schema(), other.openint);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.chginoi)) {
        this.chginoi = data().deepCopy(fields()[13].schema(), other.chginoi);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.trdate)) {
        this.trdate = data().deepCopy(fields()[14].schema(), other.trdate);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.tmstamp)) {
        this.tmstamp = data().deepCopy(fields()[15].schema(), other.tmstamp);
        fieldSetFlags()[15] = true;
      }
    }

    /**
      * Gets the value of the 'instrument' field.
      * Future or option broadly
      * @return The value.
      */
    public java.lang.String getInstrument() {
      return instrument;
    }


    /**
      * Sets the value of the 'instrument' field.
      * Future or option broadly
      * @param value The value of 'instrument'.
      * @return This builder.
      */
    public com.example.Nseforec.Builder setInstrument(java.lang.String value) {
      validate(fields()[0], value);
      this.instrument = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'instrument' field has been set.
      * Future or option broadly
      * @return True if the 'instrument' field has been set, false otherwise.
      */
    public boolean hasInstrument() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'instrument' field.
      * Future or option broadly
      * @return This builder.
      */
    public com.example.Nseforec.Builder clearInstrument() {
      instrument = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'symbol' field.
      * Name of the stock traded
      * @return The value.
      */
    public java.lang.String getSymbol() {
      return symbol;
    }


    /**
      * Sets the value of the 'symbol' field.
      * Name of the stock traded
      * @param value The value of 'symbol'.
      * @return This builder.
      */
    public com.example.Nseforec.Builder setSymbol(java.lang.String value) {
      validate(fields()[1], value);
      this.symbol = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'symbol' field has been set.
      * Name of the stock traded
      * @return True if the 'symbol' field has been set, false otherwise.
      */
    public boolean hasSymbol() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'symbol' field.
      * Name of the stock traded
      * @return This builder.
      */
    public com.example.Nseforec.Builder clearSymbol() {
      symbol = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'expiry_dt' field.
      * Expiry date of contract
      * @return The value.
      */
    public java.lang.String getExpiryDt() {
      return expiry_dt;
    }


    /**
      * Sets the value of the 'expiry_dt' field.
      * Expiry date of contract
      * @param value The value of 'expiry_dt'.
      * @return This builder.
      */
    public com.example.Nseforec.Builder setExpiryDt(java.lang.String value) {
      validate(fields()[2], value);
      this.expiry_dt = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'expiry_dt' field has been set.
      * Expiry date of contract
      * @return True if the 'expiry_dt' field has been set, false otherwise.
      */
    public boolean hasExpiryDt() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'expiry_dt' field.
      * Expiry date of contract
      * @return This builder.
      */
    public com.example.Nseforec.Builder clearExpiryDt() {
      expiry_dt = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'strike_pr' field.
      * Strike price for options, 0 for Futures
      * @return The value.
      */
    public float getStrikePr() {
      return strike_pr;
    }


    /**
      * Sets the value of the 'strike_pr' field.
      * Strike price for options, 0 for Futures
      * @param value The value of 'strike_pr'.
      * @return This builder.
      */
    public com.example.Nseforec.Builder setStrikePr(float value) {
      validate(fields()[3], value);
      this.strike_pr = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'strike_pr' field has been set.
      * Strike price for options, 0 for Futures
      * @return True if the 'strike_pr' field has been set, false otherwise.
      */
    public boolean hasStrikePr() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'strike_pr' field.
      * Strike price for options, 0 for Futures
      * @return This builder.
      */
    public com.example.Nseforec.Builder clearStrikePr() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'option_typ' field.
      * CE, PE, XX
      * @return The value.
      */
    public java.lang.String getOptionTyp() {
      return option_typ;
    }


    /**
      * Sets the value of the 'option_typ' field.
      * CE, PE, XX
      * @param value The value of 'option_typ'.
      * @return This builder.
      */
    public com.example.Nseforec.Builder setOptionTyp(java.lang.String value) {
      validate(fields()[4], value);
      this.option_typ = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'option_typ' field has been set.
      * CE, PE, XX
      * @return True if the 'option_typ' field has been set, false otherwise.
      */
    public boolean hasOptionTyp() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'option_typ' field.
      * CE, PE, XX
      * @return This builder.
      */
    public com.example.Nseforec.Builder clearOptionTyp() {
      option_typ = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'openpr' field.
      * opening price
      * @return The value.
      */
    public float getOpenpr() {
      return openpr;
    }


    /**
      * Sets the value of the 'openpr' field.
      * opening price
      * @param value The value of 'openpr'.
      * @return This builder.
      */
    public com.example.Nseforec.Builder setOpenpr(float value) {
      validate(fields()[5], value);
      this.openpr = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'openpr' field has been set.
      * opening price
      * @return True if the 'openpr' field has been set, false otherwise.
      */
    public boolean hasOpenpr() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'openpr' field.
      * opening price
      * @return This builder.
      */
    public com.example.Nseforec.Builder clearOpenpr() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'highpr' field.
      * highest price in the day
      * @return The value.
      */
    public float getHighpr() {
      return highpr;
    }


    /**
      * Sets the value of the 'highpr' field.
      * highest price in the day
      * @param value The value of 'highpr'.
      * @return This builder.
      */
    public com.example.Nseforec.Builder setHighpr(float value) {
      validate(fields()[6], value);
      this.highpr = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'highpr' field has been set.
      * highest price in the day
      * @return True if the 'highpr' field has been set, false otherwise.
      */
    public boolean hasHighpr() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'highpr' field.
      * highest price in the day
      * @return This builder.
      */
    public com.example.Nseforec.Builder clearHighpr() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'lowpr' field.
      * lowest price in the day
      * @return The value.
      */
    public float getLowpr() {
      return lowpr;
    }


    /**
      * Sets the value of the 'lowpr' field.
      * lowest price in the day
      * @param value The value of 'lowpr'.
      * @return This builder.
      */
    public com.example.Nseforec.Builder setLowpr(float value) {
      validate(fields()[7], value);
      this.lowpr = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'lowpr' field has been set.
      * lowest price in the day
      * @return True if the 'lowpr' field has been set, false otherwise.
      */
    public boolean hasLowpr() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'lowpr' field.
      * lowest price in the day
      * @return This builder.
      */
    public com.example.Nseforec.Builder clearLowpr() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'closepr' field.
      * closing price
      * @return The value.
      */
    public float getClosepr() {
      return closepr;
    }


    /**
      * Sets the value of the 'closepr' field.
      * closing price
      * @param value The value of 'closepr'.
      * @return This builder.
      */
    public com.example.Nseforec.Builder setClosepr(float value) {
      validate(fields()[8], value);
      this.closepr = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'closepr' field has been set.
      * closing price
      * @return True if the 'closepr' field has been set, false otherwise.
      */
    public boolean hasClosepr() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'closepr' field.
      * closing price
      * @return This builder.
      */
    public com.example.Nseforec.Builder clearClosepr() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'settlepr' field.
      * settlement price
      * @return The value.
      */
    public float getSettlepr() {
      return settlepr;
    }


    /**
      * Sets the value of the 'settlepr' field.
      * settlement price
      * @param value The value of 'settlepr'.
      * @return This builder.
      */
    public com.example.Nseforec.Builder setSettlepr(float value) {
      validate(fields()[9], value);
      this.settlepr = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'settlepr' field has been set.
      * settlement price
      * @return True if the 'settlepr' field has been set, false otherwise.
      */
    public boolean hasSettlepr() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'settlepr' field.
      * settlement price
      * @return This builder.
      */
    public com.example.Nseforec.Builder clearSettlepr() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'contracts' field.
      * number of contracts
      * @return The value.
      */
    public int getContracts() {
      return contracts;
    }


    /**
      * Sets the value of the 'contracts' field.
      * number of contracts
      * @param value The value of 'contracts'.
      * @return This builder.
      */
    public com.example.Nseforec.Builder setContracts(int value) {
      validate(fields()[10], value);
      this.contracts = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'contracts' field has been set.
      * number of contracts
      * @return True if the 'contracts' field has been set, false otherwise.
      */
    public boolean hasContracts() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'contracts' field.
      * number of contracts
      * @return This builder.
      */
    public com.example.Nseforec.Builder clearContracts() {
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'valinlakh' field.
      * total value traded in lakhs
      * @return The value.
      */
    public float getValinlakh() {
      return valinlakh;
    }


    /**
      * Sets the value of the 'valinlakh' field.
      * total value traded in lakhs
      * @param value The value of 'valinlakh'.
      * @return This builder.
      */
    public com.example.Nseforec.Builder setValinlakh(float value) {
      validate(fields()[11], value);
      this.valinlakh = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'valinlakh' field has been set.
      * total value traded in lakhs
      * @return True if the 'valinlakh' field has been set, false otherwise.
      */
    public boolean hasValinlakh() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'valinlakh' field.
      * total value traded in lakhs
      * @return This builder.
      */
    public com.example.Nseforec.Builder clearValinlakh() {
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'openint' field.
      * total positions open
      * @return The value.
      */
    public int getOpenint() {
      return openint;
    }


    /**
      * Sets the value of the 'openint' field.
      * total positions open
      * @param value The value of 'openint'.
      * @return This builder.
      */
    public com.example.Nseforec.Builder setOpenint(int value) {
      validate(fields()[12], value);
      this.openint = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'openint' field has been set.
      * total positions open
      * @return True if the 'openint' field has been set, false otherwise.
      */
    public boolean hasOpenint() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'openint' field.
      * total positions open
      * @return This builder.
      */
    public com.example.Nseforec.Builder clearOpenint() {
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'chginoi' field.
      * change in open interest in the day
      * @return The value.
      */
    public int getChginoi() {
      return chginoi;
    }


    /**
      * Sets the value of the 'chginoi' field.
      * change in open interest in the day
      * @param value The value of 'chginoi'.
      * @return This builder.
      */
    public com.example.Nseforec.Builder setChginoi(int value) {
      validate(fields()[13], value);
      this.chginoi = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'chginoi' field has been set.
      * change in open interest in the day
      * @return True if the 'chginoi' field has been set, false otherwise.
      */
    public boolean hasChginoi() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'chginoi' field.
      * change in open interest in the day
      * @return This builder.
      */
    public com.example.Nseforec.Builder clearChginoi() {
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'trdate' field.
      * trade date in DD-MMMM-YYYY format
      * @return The value.
      */
    public java.lang.String getTrdate() {
      return trdate;
    }


    /**
      * Sets the value of the 'trdate' field.
      * trade date in DD-MMMM-YYYY format
      * @param value The value of 'trdate'.
      * @return This builder.
      */
    public com.example.Nseforec.Builder setTrdate(java.lang.String value) {
      validate(fields()[14], value);
      this.trdate = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'trdate' field has been set.
      * trade date in DD-MMMM-YYYY format
      * @return True if the 'trdate' field has been set, false otherwise.
      */
    public boolean hasTrdate() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'trdate' field.
      * trade date in DD-MMMM-YYYY format
      * @return This builder.
      */
    public com.example.Nseforec.Builder clearTrdate() {
      trdate = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'tmstamp' field.
      * timestamp when record was inserted
      * @return The value.
      */
    public java.lang.String getTmstamp() {
      return tmstamp;
    }


    /**
      * Sets the value of the 'tmstamp' field.
      * timestamp when record was inserted
      * @param value The value of 'tmstamp'.
      * @return This builder.
      */
    public com.example.Nseforec.Builder setTmstamp(java.lang.String value) {
      validate(fields()[15], value);
      this.tmstamp = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'tmstamp' field has been set.
      * timestamp when record was inserted
      * @return True if the 'tmstamp' field has been set, false otherwise.
      */
    public boolean hasTmstamp() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'tmstamp' field.
      * timestamp when record was inserted
      * @return This builder.
      */
    public com.example.Nseforec.Builder clearTmstamp() {
      tmstamp = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Nseforec build() {
      try {
        Nseforec record = new Nseforec();
        record.instrument = fieldSetFlags()[0] ? this.instrument : (java.lang.String) defaultValue(fields()[0]);
        record.symbol = fieldSetFlags()[1] ? this.symbol : (java.lang.String) defaultValue(fields()[1]);
        record.expiry_dt = fieldSetFlags()[2] ? this.expiry_dt : (java.lang.String) defaultValue(fields()[2]);
        record.strike_pr = fieldSetFlags()[3] ? this.strike_pr : (java.lang.Float) defaultValue(fields()[3]);
        record.option_typ = fieldSetFlags()[4] ? this.option_typ : (java.lang.String) defaultValue(fields()[4]);
        record.openpr = fieldSetFlags()[5] ? this.openpr : (java.lang.Float) defaultValue(fields()[5]);
        record.highpr = fieldSetFlags()[6] ? this.highpr : (java.lang.Float) defaultValue(fields()[6]);
        record.lowpr = fieldSetFlags()[7] ? this.lowpr : (java.lang.Float) defaultValue(fields()[7]);
        record.closepr = fieldSetFlags()[8] ? this.closepr : (java.lang.Float) defaultValue(fields()[8]);
        record.settlepr = fieldSetFlags()[9] ? this.settlepr : (java.lang.Float) defaultValue(fields()[9]);
        record.contracts = fieldSetFlags()[10] ? this.contracts : (java.lang.Integer) defaultValue(fields()[10]);
        record.valinlakh = fieldSetFlags()[11] ? this.valinlakh : (java.lang.Float) defaultValue(fields()[11]);
        record.openint = fieldSetFlags()[12] ? this.openint : (java.lang.Integer) defaultValue(fields()[12]);
        record.chginoi = fieldSetFlags()[13] ? this.chginoi : (java.lang.Integer) defaultValue(fields()[13]);
        record.trdate = fieldSetFlags()[14] ? this.trdate : (java.lang.String) defaultValue(fields()[14]);
        record.tmstamp = fieldSetFlags()[15] ? this.tmstamp : (java.lang.String) defaultValue(fields()[15]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Nseforec>
    WRITER$ = (org.apache.avro.io.DatumWriter<Nseforec>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Nseforec>
    READER$ = (org.apache.avro.io.DatumReader<Nseforec>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.instrument);

    out.writeString(this.symbol);

    out.writeString(this.expiry_dt);

    out.writeFloat(this.strike_pr);

    out.writeString(this.option_typ);

    out.writeFloat(this.openpr);

    out.writeFloat(this.highpr);

    out.writeFloat(this.lowpr);

    out.writeFloat(this.closepr);

    out.writeFloat(this.settlepr);

    out.writeInt(this.contracts);

    out.writeFloat(this.valinlakh);

    out.writeInt(this.openint);

    out.writeInt(this.chginoi);

    out.writeString(this.trdate);

    out.writeString(this.tmstamp);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.instrument = in.readString();

      this.symbol = in.readString();

      this.expiry_dt = in.readString();

      this.strike_pr = in.readFloat();

      this.option_typ = in.readString();

      this.openpr = in.readFloat();

      this.highpr = in.readFloat();

      this.lowpr = in.readFloat();

      this.closepr = in.readFloat();

      this.settlepr = in.readFloat();

      this.contracts = in.readInt();

      this.valinlakh = in.readFloat();

      this.openint = in.readInt();

      this.chginoi = in.readInt();

      this.trdate = in.readString();

      this.tmstamp = in.readString();

    } else {
      for (int i = 0; i < 16; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.instrument = in.readString();
          break;

        case 1:
          this.symbol = in.readString();
          break;

        case 2:
          this.expiry_dt = in.readString();
          break;

        case 3:
          this.strike_pr = in.readFloat();
          break;

        case 4:
          this.option_typ = in.readString();
          break;

        case 5:
          this.openpr = in.readFloat();
          break;

        case 6:
          this.highpr = in.readFloat();
          break;

        case 7:
          this.lowpr = in.readFloat();
          break;

        case 8:
          this.closepr = in.readFloat();
          break;

        case 9:
          this.settlepr = in.readFloat();
          break;

        case 10:
          this.contracts = in.readInt();
          break;

        case 11:
          this.valinlakh = in.readFloat();
          break;

        case 12:
          this.openint = in.readInt();
          break;

        case 13:
          this.chginoi = in.readInt();
          break;

        case 14:
          this.trdate = in.readString();
          break;

        case 15:
          this.tmstamp = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










